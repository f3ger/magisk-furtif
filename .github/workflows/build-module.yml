name: Build Magisk Module

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
  release:
    types: [ created, edited ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Vollst채ndiges Repository abrufen
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Check directory structure
      run: |
        echo "Current directory contents:"
        ls -la
        
        # Create necessary directories if they don't exist
        mkdir -p base/common
        mkdir -p base/system
        mkdir -p base/META-INF
        mkdir -p builds
        
        # Copy files to the correct locations if needed
        if [ -f "service.sh" ] && [ ! -f "base/common/service.sh" ]; then
          cp service.sh base/common/
          echo "Copied service.sh to base/common/"
        fi
        
        if [ -f "install.sh" ] && [ ! -f "base/install.sh" ]; then
          cp install.sh base/
          echo "Copied install.sh to base/"
        fi
        
        if [ -f "post-fs-data.sh" ] && [ ! -f "base/common/post-fs-data.sh" ]; then
          cp post-fs-data.sh base/common/
          echo "Copied post-fs-data.sh to base/common/"
        fi
        
        echo "Directory structure after preparations:"
        ls -la base/
        ls -la base/common/
        
    - name: Build Magisk Module
      id: build
      run: |
        # Modul bauen mit dem Python-Skript
        python build.py
        
        # Namen der ZIP-Datei f체r sp채tere Schritte speichern
        ZIP_FILE=$(find builds -name "*.zip" | head -n 1)
        if [ -n "$ZIP_FILE" ]; then
          echo "Created ZIP file: $ZIP_FILE"
          echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV
          
          # Version aus dem Dateinamen extrahieren
          VERSION=$(echo $ZIP_FILE | grep -oP 'MagiskFurtif-atv-\K[0-9.]+(?=\.zip)')
          echo "Extracted version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        else
          echo "No ZIP file was created, build failed!"
          exit 1
        fi
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: MagiskFurtif-Module
        path: ${{ env.ZIP_FILE }}
        
    - name: Upload to Release
      if: github.event_name == 'release'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Upload asset using GitHub CLI
        gh release upload ${{ github.event.release.tag_name }} "${{ env.ZIP_FILE }}" --clobber
          
    - name: Update updater.json
      if: github.event_name == 'release'
      run: |
        # Checkout the main branch explicitly
        git checkout main
        
        VERSION="${{ env.VERSION }}"
        VERSION_CODE=$(echo $VERSION | sed 's/\.//g')
        
        # Erstelle ein tempor채res JSON-Datei
        cat > updater.json.tmp << EOF
        {
            "version": "$VERSION",
            "versionCode": $VERSION_CODE,
            "zipUrl": "https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/MagiskFurtif-atv-$VERSION.zip"
        }
        EOF
        
        # Ersetze die bestehende updater.json
        mv updater.json.tmp updater.json
        
        # Committe und pushe die aktualisierte updater.json
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"
        git add updater.json
        git commit -m "Update updater.json to version $VERSION [skip ci]"
        git push origin main